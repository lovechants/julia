name: Selective Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  selective-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install numpy pytest
          pip install -e .

      - name: List files for debugging
        run: |
          pwd
          ls -l
          ls -l julia/tests || echo "No julia/tests directory"

      - name: Run selective tests based on changes
        run: |
          set -e
          # Get changed files
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD)
          else
            CHANGED_FILES=$(git diff --name-only HEAD~1..HEAD)
          fi

          echo "Changed files:"
          echo "$CHANGED_FILES"
          echo ""

          # Define marker patterns and their triggers
          declare -A MARKERS
          MARKERS[autograd]="ops|autograd|tensor\.py|Function"
          MARKERS[compiler]="backend|llvm|cuda|metal|clang|triton|compiler"
          MARKERS[neural_network]="nn/|conv|pool|linear|attention"
          MARKERS[numerical]="ops/|loss\.py|optim\.py"
          MARKERS[memory]="memory\.py"
          MARKERS[integration]="examples/"
          MARKERS[serialization]="ir\.py|onnx\.py|utils/.*_registry\.py"
          MARKERS[profiling]="profiler\.py"
          MARKERS[data]="data\.py|data_utils\.py"
          MARKERS[benchmark]="ops/|autograd|tensor\.py|backend/"
          MARKERS[slow]="tensor\.py|autograd\.py|ops\.py"

          # Run tests for each marker if relevant files changed and tests exist
          for marker in "${!MARKERS[@]}"; do
            pattern="${MARKERS[$marker]}"
            if echo "$CHANGED_FILES" | grep -E "$pattern" > /dev/null; then
              echo "Detected changes for marker: $marker (pattern: $pattern)"
              if grep -r "@pytest.mark.$marker" julia/tests/; then
                python -m pytest julia/tests/ -m "$marker" -v --tb=short
              else
                echo "No tests found for marker: $marker, skipping."
              fi
            fi
          done

      - name: Always show test results
        if: always()
        run: |
          echo "Selective testing job complete."

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            pytest-report.xml
            .coverage
          retention-days: 30

  backend-tests:
    name: Backend-Specific Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "LLVM CPU Backend"
            os: ubuntu-latest
            install: "llvmlite"
            markers: "compiler_cpu_llvm"
            continue-on-error: false
          - name: "Clang CPU Backend"
            os: ubuntu-latest
            install: "clang"
            markers: "compiler_cpu_clang"
            setup: |
              sudo apt-get update
              sudo apt-get install -y clang
            continue-on-error: false
          # - name: "CUDA Backend"
          #   os: ubuntu-latest
          #   install: "pycuda"
          #   markers: "compiler_gpu_cuda"
          #   setup: |
          #     wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-keyring_1.0-1_all.deb
          #     sudo dpkg -i cuda-keyring_1.0-1_all.deb
          #     sudo apt-get update
          #     sudo apt-get -y install cuda-toolkit-11-8
          #   skip_on_no_gpu: true
          #   continue-on-error: true
          # - name: "Triton Backend"
          #   os: ubuntu-latest
          #   install: "triton"
          #   markers: "compiler_gpu_triton"
          #   setup: |
          #     wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-keyring_1.0-1_all.deb
          #     sudo dpkg -i cuda-keyring_1.0-1_all.deb
          #     sudo apt-get update
          #     sudo apt-get -y install cuda-toolkit-11-8
          #   skip_on_no_gpu: true
          #   continue-on-error: true
          - name: "OpenCL Backend"
            os: ubuntu-latest
            install: "pyopencl"
            markers: "compiler_gpu_opencl"
            setup: |
              sudo apt-get update
              sudo apt-get install -y opencl-headers ocl-icd-opencl-dev
            continue-on-error: false
            allow_failure: true
          # - name: "ROCm Backend"
          #   os: ubuntu-latest
          #   install: "hip-python"
          #   markers: "compiler_gpu_rocm"
          #   setup: |
          #     wget -qO - https://repo.radeon.com/rocm/rocm.gpg.key | sudo apt-key add -
          #     echo 'deb [arch=amd64] https://repo.radeon.com/rocm/apt/debian/ ubuntu main' | sudo tee /etc/apt/sources.list.d/rocm.list
          #     sudo apt-get update
          #     sudo apt-get install -y rocm-dev
          #   skip_on_no_gpu: true
          #   continue-on-error: true
          - name: "Metal Backend"
            os: macos-latest
            install: "pyobjc-framework-Metal"
            markers: "compiler_gpu_metal"
            continue-on-error: false
          - name: "ONNX Support"
            os: ubuntu-latest
            install: "onnx onnxruntime"
            markers: "serialization_onnx"
            continue-on-error: false
          - name: "Memory Profiling"
            os: ubuntu-latest
            install: "psutil"
            markers: "memory_profiling"
            continue-on-error: false

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install base dependencies
        run: |
          python -m pip install --upgrade pip
          pip install numpy pytest
          pip install -e .

      - name: System setup for ${{ matrix.name }}
        if: matrix.setup
        run: ${{ matrix.setup }}

      - name: Install backend dependencies
        run: |
          pip install ${{ matrix.install }}
        continue-on-error: ${{ matrix.continue-on-error }}

      - name: Check GPU availability
        if: matrix.skip_on_no_gpu == true
        run: |
          if ! nvidia-smi &> /dev/null; then
            echo "No GPU detected, skipping GPU tests"
            echo "SKIP_GPU_TESTS=true" >> $GITHUB_ENV
          fi
        continue-on-error: true

      - name: Run tests for ${{ matrix.name }} if any exist
        if: env.SKIP_GPU_TESTS != 'true'
        working-directory: julia
        continue-on-error: ${{ matrix.continue-on-error }}
        run: |
          marker="${{ matrix.markers }}"
          if grep -r "@pytest.mark.${marker}" julia/tests/; then
            echo "Running tests for marker: $marker"
            python -m pytest julia/tests/ -m "$marker" -v --tb=short
          else
            echo "No tests found for marker: $marker, skipping."
          fi

      - name: Run CPU fallback tests
        if: env.SKIP_GPU_TESTS == 'true' && contains(matrix.markers, 'gpu')
        working-directory: julia
        run: |
          if grep -r "@pytest.mark.compiler_cpu" julia/tests/; then
            echo "Running CPU fallback tests"
            python -m pytest julia/tests/ -m "compiler_cpu" -v --tb=short
          else
            echo "No CPU fallback tests found, skipping."
          fi
